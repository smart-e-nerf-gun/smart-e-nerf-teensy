#include "NERF_Display.h"
#include <Fonts/FreeMonoBold24pt7b.h> //For Ammo count
#include <Fonts/FreeMono9pt7b.h>  // For all other information

void NERF_Display::setupDisplay() {
	delay(100);
	// SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
	if (!begin(SSD1306_SWITCHCAPVCC, 0x3D)) { // Address 0x3D for 128x64
		Serial.println(F("SSD1306 allocation failed"));
		for (;;)
			; // Don't proceed, loop forever
	}
	
	setTextColor(WHITE); //Set text color. But its monochrome so there really is no other choice
	setRotation(0); //Set orientation
	setTextWrap(false); //To prevent long lines from wrapping around
	dim(0); //Set brightness. 1 is too dim
	clearDisplay(); //Clear display/buffer
}

static const unsigned char unauth[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x03, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xF0, 0x00, 0x00,
	0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00,
	0x00, 0x03, 0xFF, 0xF8, 0x3F, 0xFF, 0x80, 0x00, 0x00, 0x07, 0xFF, 0x00, 0x01, 0xFF, 0xC0, 0x00,
	0x00, 0x0F, 0xFC, 0x00, 0x00, 0x7F, 0xE0, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x1F, 0xF0, 0x00,
	0x00, 0x3F, 0xC0, 0x00, 0x00, 0x07, 0xF8, 0x00, 0x00, 0x7F, 0x80, 0x00, 0x00, 0x03, 0xFC, 0x00,
	0x00, 0xFF, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00,
	0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00, 0x03, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80,
	0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xC0,
	0x07, 0xE0, 0x07, 0x00, 0x01, 0xC0, 0x0F, 0xC0, 0x0F, 0xE0, 0x0F, 0x80, 0x03, 0xE0, 0x07, 0xE0,
	0x0F, 0xC0, 0x0F, 0xC0, 0x07, 0xE0, 0x07, 0xE0, 0x0F, 0xC0, 0x0F, 0xE0, 0x0F, 0xE0, 0x03, 0xE0,
	0x0F, 0x80, 0x0F, 0xF0, 0x1F, 0xE0, 0x03, 0xF0, 0x1F, 0x80, 0x07, 0xF8, 0x3F, 0xC0, 0x03, 0xF0,
	0x1F, 0x80, 0x03, 0xFC, 0x7F, 0x80, 0x01, 0xF0, 0x1F, 0x00, 0x01, 0xFE, 0xFF, 0x00, 0x01, 0xF0,
	0x1F, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x01, 0xF0, 0x1F, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x01, 0xF8,
	0x1F, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x01, 0xF8, 0x1F, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x01, 0xF8,
	0x1F, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x01, 0xF8, 0x1F, 0x00, 0x00, 0x3F, 0xF8, 0x00, 0x01, 0xF8,
	0x1F, 0x00, 0x00, 0x7F, 0xFC, 0x00, 0x01, 0xF0, 0x1F, 0x00, 0x00, 0xFF, 0xFE, 0x00, 0x01, 0xF0,
	0x1F, 0x80, 0x01, 0xFE, 0xFF, 0x00, 0x01, 0xF0, 0x1F, 0x80, 0x03, 0xFC, 0x7F, 0x80, 0x03, 0xF0,
	0x1F, 0x80, 0x07, 0xF8, 0x3F, 0xC0, 0x03, 0xF0, 0x0F, 0x80, 0x0F, 0xF0, 0x1F, 0xE0, 0x03, 0xF0,
	0x0F, 0xC0, 0x0F, 0xE0, 0x0F, 0xE0, 0x07, 0xE0, 0x0F, 0xC0, 0x0F, 0xC0, 0x07, 0xE0, 0x07, 0xE0,
	0x07, 0xE0, 0x0F, 0x80, 0x03, 0xE0, 0x07, 0xE0, 0x07, 0xE0, 0x02, 0x00, 0x00, 0x80, 0x0F, 0xC0,
	0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xC0, 0x03, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x80,
	0x01, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x00,
	0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00, 0x01, 0xFE, 0x00,
	0x00, 0x7F, 0x80, 0x00, 0x00, 0x03, 0xFC, 0x00, 0x00, 0x3F, 0xE0, 0x00, 0x00, 0x07, 0xF8, 0x00,
	0x00, 0x1F, 0xF0, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x0F, 0xFC, 0x00, 0x00, 0x7F, 0xE0, 0x00,
	0x00, 0x07, 0xFF, 0x80, 0x03, 0xFF, 0xC0, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
	0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xF8, 0x00, 0x00,
	0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char auth[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x07, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x07, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFE, 0x3F, 0xFC, 0x00, 0x00,
	0x00, 0x00, 0x3F, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x1F, 0x80, 0x00,
	0x00, 0x03, 0xE0, 0x00, 0x00, 0x07, 0xE0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xE0, 0x00,
	0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00,
	0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00,
	0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80,
	0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0,
	0x07, 0x80, 0x00, 0x00, 0x00, 0x01, 0x80, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x03, 0xC0, 0xE0,
	0x07, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0, 0x70, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0, 0x70,
	0x0E, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF0, 0x30, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFC, 0x38,
	0x0C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFC, 0x38, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xF0, 0x38,
	0x1C, 0x01, 0xC0, 0x00, 0x01, 0xFF, 0xF0, 0x3C, 0x1C, 0x01, 0xE0, 0x00, 0x03, 0xFF, 0xE0, 0x1C,
	0x1C, 0x03, 0xF0, 0x00, 0x07, 0xFF, 0x80, 0x1C, 0x3C, 0x07, 0xF8, 0x00, 0x0F, 0xFF, 0x80, 0x1C,
	0x3C, 0x0F, 0xFC, 0x00, 0x1F, 0xFF, 0x00, 0x1C, 0x3C, 0x1F, 0xFE, 0x00, 0x3F, 0xFE, 0x00, 0x1C,
	0x3C, 0x1F, 0xFF, 0x00, 0xFF, 0xFC, 0x00, 0x1C, 0x3C, 0x1F, 0xFF, 0x81, 0xFF, 0xF0, 0x00, 0x1C,
	0x3C, 0x0F, 0xFF, 0xC1, 0xFF, 0xF0, 0x00, 0x1C, 0x1C, 0x07, 0xFF, 0xE3, 0xFF, 0xE0, 0x00, 0x1C,
	0x1C, 0x01, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x1C, 0x1C, 0x00, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x3C,
	0x0C, 0x00, 0x7F, 0xFF, 0xFF, 0x00, 0x00, 0x38, 0x0C, 0x00, 0x3F, 0xFF, 0xFE, 0x00, 0x00, 0x38,
	0x0E, 0x00, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x38, 0x0E, 0x00, 0x0F, 0xFF, 0xF0, 0x00, 0x00, 0x30,
	0x0F, 0x00, 0x07, 0xFF, 0xE0, 0x00, 0x00, 0x70, 0x07, 0x00, 0x03, 0xFF, 0xE0, 0x00, 0x00, 0x70,
	0x07, 0x00, 0x01, 0xFF, 0x80, 0x00, 0x00, 0xE0, 0x03, 0x80, 0x00, 0xFF, 0x80, 0x00, 0x01, 0xE0,
	0x01, 0x80, 0x00, 0x7E, 0x00, 0x00, 0x01, 0xC0, 0x01, 0xE0, 0x00, 0x3C, 0x00, 0x00, 0x03, 0x80,
	0x00, 0xE0, 0x00, 0x18, 0x00, 0x00, 0x07, 0x80, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
	0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00,
	0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0x00, 0xF0, 0x00,
	0x00, 0x07, 0x80, 0x00, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x03, 0xF0, 0x00, 0x00, 0x07, 0xE0, 0x00,
	0x00, 0x00, 0xFC, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x7E, 0x00, 0x00,
	0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xE0, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x3F, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void NERF_Display::display_unauth() {
	clearDisplay();

	drawBitmap(
		(width() - LOGO_WIDTH) / 2,
		(height() - LOGO_HEIGHT) / 2,
		unauth, LOGO_WIDTH, LOGO_HEIGHT, 1);
	display();
	//delay(1000);
}

void NERF_Display::display_auth() {
	clearDisplay();

	drawBitmap(
		(width() - LOGO_WIDTH) / 2,
		(height() - LOGO_HEIGHT) / 2,
		auth, LOGO_WIDTH, LOGO_HEIGHT, 1);
	display();
	// delay(1000);
}

void NERF_Display::setupStaticText(){
	cp437(true);
	//misfire setup text
	setCursor(misfirecursor[0],misfirecursor[1]);
	write(0);write(0);write(0);write(0);write(109);write(105);write(115);write(115);//write "miss" in screen strting with blank space for number
	display();

	//shot count setup text
	setCursor(shotcursor[0],shotcursor[1]);
	write(0);write(0);write(0);write(0);write(115);write(104);write(111);write(116);write(115);//write "shots" in screen strting with blank space for number
	display();

	//bullet speed setup text
	setCursor(bulletcursor[0],bulletcursor[1]);
	write(0);write(0);write(0);write(109);write(47);write(115);//write "m/s" in screen strting with blank space for number
	display();

}

void NERF_Display::invert_display(){
  invertDisplay(true);
  delay(250);
  invertDisplay(false);
  delay(250);
}

void NERF_Display::updateAC(int AC){
	unsigned int AC_buffer=AC;
	setTextSize(4);

	setTextColor(BLACK); // set text color to black
  	setCursor(ammocursor[0],ammocursor[1]);
  	write(219);write(219);

	setTextColor(WHITE);
	setCursor(ammocursor[0],ammocursor[1]);
	print(AC_buffer);
}

void NERF_Display::updateMF(int MF){
  unsigned int MF_buffer=MF;
  setTextSize(1);

  setTextColor(BLACK); // set text color to black
  setCursor(misfirecursor[0],misfirecursor[1]);
  write(219);write(219);write(219);write(219); //make sure previous value is cleared by overwriting it with black pixels

  setTextColor(WHITE); // set text color to white
  setCursor(misfirecursor[0],misfirecursor[1]);
  print(MF_buffer);
  
  display();
}

void NERF_Display::updateTS(int TS){
  unsigned int TS_buffer=TS;
  setTextSize(1);

  setTextColor(BLACK); // set text color to black
  setCursor(shotcursor[0],shotcursor[1]);
  write(219);write(219);write(219);write(219); //make sure previous value is cleared by overwriting it with black pixels

  setTextColor(WHITE); // set text color to white
  setCursor(shotcursor[0],shotcursor[1]);
  print(TS_buffer);
  
  display();
}

void NERF_Display::updateBS(int BS){
  unsigned int BS_buffer=BS;
  setTextSize(1);

  setTextColor(BLACK); // set text color to black
  setCursor(bulletcursor[0],bulletcursor[1]);
  write(219);write(219);write(219); //make sure previous value is cleared by overwriting it with black pixels

  setTextColor(WHITE); // set text color to white
  setCursor(bulletcursor[0],bulletcursor[1]);
  print(BS_buffer);
  
  display();
}



